// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`atom/PickerTime PickerTime-snapshot 1`] = `
<PickerTime
  error={false}
  errorMessage="エラーメッセージ"
  inputVariant="standard"
  label="ラベル"
  margin="normal"
  setter={[Function]}
>
  <MuiPickersUtilsProvider
    utils={[Function]}
  >
    <PickerWithState
      ampm={false}
      autoOk={true}
      error={false}
      fullWidth={true}
      inputVariant="standard"
      invalidDateMessage="Invalid Time Format"
      label="ラベル"
      margin="normal"
      onChange={[Function]}
      openTo="hours"
      value={null}
      variant="inline"
      views={
        Array [
          "hours",
          "minutes",
        ]
      }
    >
      <Wrapper
        DateInputProps={
          Object {
            "inputValue": "",
            "openPicker": [Function],
            "validationError": "",
          }
        }
        InputComponent={[Function]}
        error={false}
        format="HH:mm"
        fullWidth={true}
        inputVariant="standard"
        label="ラベル"
        margin="normal"
        onAccept={[Function]}
        onClear={[Function]}
        onDismiss={[Function]}
        onSetToday={[Function]}
        open={false}
        variant="inline"
      >
        <InlineWrapper
          DateInputProps={
            Object {
              "inputValue": "",
              "openPicker": [Function],
              "validationError": "",
            }
          }
          InputComponent={[Function]}
          error={false}
          format="HH:mm"
          fullWidth={true}
          inputVariant="standard"
          label="ラベル"
          margin="normal"
          onAccept={[Function]}
          onClear={[Function]}
          onDismiss={[Function]}
          onSetToday={[Function]}
          open={false}
        >
          <PureDateInput
            error={false}
            format="HH:mm"
            fullWidth={true}
            inputRef={
              Object {
                "current": <input
                  aria-invalid="false"
                  class="MuiInputBase-input MuiInput-input"
                  readonly=""
                  type="text"
                  value=""
                />,
              }
            }
            inputValue=""
            inputVariant="standard"
            label="ラベル"
            margin="normal"
            openPicker={[Function]}
            validationError=""
          >
            <WithStyles(ForwardRef(TextField))
              InputProps={
                Object {
                  "readOnly": true,
                }
              }
              error={false}
              format="HH:mm"
              fullWidth={true}
              helperText=""
              inputRef={
                Object {
                  "current": <input
                    aria-invalid="false"
                    class="MuiInputBase-input MuiInput-input"
                    readonly=""
                    type="text"
                    value=""
                  />,
                }
              }
              label="ラベル"
              margin="normal"
              onClick={[Function]}
              onKeyDown={[Function]}
              value=""
              variant="standard"
            >
              <ForwardRef(TextField)
                InputProps={
                  Object {
                    "readOnly": true,
                  }
                }
                classes={
                  Object {
                    "root": "MuiTextField-root",
                  }
                }
                error={false}
                format="HH:mm"
                fullWidth={true}
                helperText=""
                inputRef={
                  Object {
                    "current": <input
                      aria-invalid="false"
                      class="MuiInputBase-input MuiInput-input"
                      readonly=""
                      type="text"
                      value=""
                    />,
                  }
                }
                label="ラベル"
                margin="normal"
                onClick={[Function]}
                onKeyDown={[Function]}
                value=""
                variant="standard"
              >
                <WithStyles(ForwardRef(FormControl))
                  className="MuiTextField-root"
                  color="primary"
                  disabled={false}
                  error={false}
                  format="HH:mm"
                  fullWidth={true}
                  margin="normal"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  required={false}
                  variant="standard"
                >
                  <ForwardRef(FormControl)
                    className="MuiTextField-root"
                    classes={
                      Object {
                        "fullWidth": "MuiFormControl-fullWidth",
                        "marginDense": "MuiFormControl-marginDense",
                        "marginNormal": "MuiFormControl-marginNormal",
                        "root": "MuiFormControl-root",
                      }
                    }
                    color="primary"
                    disabled={false}
                    error={false}
                    format="HH:mm"
                    fullWidth={true}
                    margin="normal"
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    required={false}
                    variant="standard"
                  >
                    <div
                      className="MuiFormControl-root MuiTextField-root MuiFormControl-marginNormal MuiFormControl-fullWidth"
                      format="HH:mm"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                    >
                      <WithStyles(ForwardRef(InputLabel))>
                        <ForwardRef(InputLabel)
                          classes={
                            Object {
                              "animated": "MuiInputLabel-animated",
                              "asterisk": "MuiInputLabel-asterisk",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "filled": "MuiInputLabel-filled",
                              "focused": "Mui-focused",
                              "formControl": "MuiInputLabel-formControl",
                              "marginDense": "MuiInputLabel-marginDense",
                              "outlined": "MuiInputLabel-outlined",
                              "required": "Mui-required",
                              "root": "MuiInputLabel-root",
                              "shrink": "MuiInputLabel-shrink",
                            }
                          }
                        >
                          <WithStyles(ForwardRef(FormLabel))
                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                            classes={
                              Object {
                                "asterisk": "MuiInputLabel-asterisk",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "required": "Mui-required",
                              }
                            }
                            data-shrink={false}
                          >
                            <ForwardRef(FormLabel)
                              className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                              classes={
                                Object {
                                  "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                  "colorSecondary": "MuiFormLabel-colorSecondary",
                                  "disabled": "Mui-disabled Mui-disabled",
                                  "error": "Mui-error Mui-error",
                                  "filled": "MuiFormLabel-filled",
                                  "focused": "Mui-focused Mui-focused",
                                  "required": "Mui-required Mui-required",
                                  "root": "MuiFormLabel-root",
                                }
                              }
                              data-shrink={false}
                            >
                              <label
                                className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                data-shrink={false}
                              >
                                ラベル
                              </label>
                            </ForwardRef(FormLabel)>
                          </WithStyles(ForwardRef(FormLabel))>
                        </ForwardRef(InputLabel)>
                      </WithStyles(ForwardRef(InputLabel))>
                      <WithStyles(ForwardRef(Input))
                        autoFocus={false}
                        fullWidth={true}
                        inputRef={
                          Object {
                            "current": <input
                              aria-invalid="false"
                              class="MuiInputBase-input MuiInput-input"
                              readonly=""
                              type="text"
                              value=""
                            />,
                          }
                        }
                        multiline={false}
                        readOnly={true}
                        value=""
                      >
                        <ForwardRef(Input)
                          autoFocus={false}
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root",
                              "underline": "MuiInput-underline",
                            }
                          }
                          fullWidth={true}
                          inputRef={
                            Object {
                              "current": <input
                                aria-invalid="false"
                                class="MuiInputBase-input MuiInput-input"
                                readonly=""
                                type="text"
                                value=""
                              />,
                            }
                          }
                          multiline={false}
                          readOnly={true}
                          value=""
                        >
                          <WithStyles(ForwardRef(InputBase))
                            autoFocus={false}
                            classes={
                              Object {
                                "colorSecondary": "MuiInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "marginDense": "MuiInput-marginDense",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root MuiInput-underline",
                                "underline": null,
                              }
                            }
                            fullWidth={true}
                            inputComponent="input"
                            inputRef={
                              Object {
                                "current": <input
                                  aria-invalid="false"
                                  class="MuiInputBase-input MuiInput-input"
                                  readonly=""
                                  type="text"
                                  value=""
                                />,
                              }
                            }
                            multiline={false}
                            readOnly={true}
                            type="text"
                            value=""
                          >
                            <ForwardRef(InputBase)
                              autoFocus={false}
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                  "disabled": "Mui-disabled Mui-disabled",
                                  "error": "Mui-error Mui-error",
                                  "focused": "Mui-focused Mui-focused",
                                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                  "input": "MuiInputBase-input MuiInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                  "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                }
                              }
                              fullWidth={true}
                              inputComponent="input"
                              inputRef={
                                Object {
                                  "current": <input
                                    aria-invalid="false"
                                    class="MuiInputBase-input MuiInput-input"
                                    readonly=""
                                    type="text"
                                    value=""
                                  />,
                                }
                              }
                              multiline={false}
                              readOnly={true}
                              type="text"
                              value=""
                            >
                              <div
                                className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                onClick={[Function]}
                              >
                                <input
                                  aria-invalid={false}
                                  autoFocus={false}
                                  className="MuiInputBase-input MuiInput-input"
                                  disabled={false}
                                  onAnimationStart={[Function]}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  readOnly={true}
                                  required={false}
                                  type="text"
                                  value=""
                                />
                              </div>
                            </ForwardRef(InputBase)>
                          </WithStyles(ForwardRef(InputBase))>
                        </ForwardRef(Input)>
                      </WithStyles(ForwardRef(Input))>
                    </div>
                  </ForwardRef(FormControl)>
                </WithStyles(ForwardRef(FormControl))>
              </ForwardRef(TextField)>
            </WithStyles(ForwardRef(TextField))>
          </PureDateInput>
          <WithStyles(ForwardRef(Popover))
            anchorOrigin={
              Object {
                "horizontal": "center",
                "vertical": "bottom",
              }
            }
            onClose={[Function]}
            open={false}
            transformOrigin={
              Object {
                "horizontal": "center",
                "vertical": "top",
              }
            }
          >
            <ForwardRef(Popover)
              anchorOrigin={
                Object {
                  "horizontal": "center",
                  "vertical": "bottom",
                }
              }
              classes={
                Object {
                  "paper": "MuiPopover-paper",
                  "root": "MuiPopover-root",
                }
              }
              onClose={[Function]}
              open={false}
              transformOrigin={
                Object {
                  "horizontal": "center",
                  "vertical": "top",
                }
              }
            >
              <ForwardRef(Modal)
                BackdropProps={
                  Object {
                    "invisible": true,
                  }
                }
                className="MuiPopover-root"
                onClose={[Function]}
                open={false}
              />
            </ForwardRef(Popover)>
          </WithStyles(ForwardRef(Popover))>
        </InlineWrapper>
      </Wrapper>
    </PickerWithState>
  </MuiPickersUtilsProvider>
</PickerTime>
`;
